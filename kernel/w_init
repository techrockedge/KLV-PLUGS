# Copyright William McEwan (wiak) 26 July 2019+; Licence MIT (aka X11 license)
# version="5.0.5"; revision="-rc1" Date: 09 Apr 2022
#
# Enter your name here for modded w_init WDL contribution:
# 
# Enter version; revision; Date; of your modded w_init WDL contribution:
#
# Enter changes details for your modded w_init WDL contribution:
#

# Familiarise yourself with the following key variables used prior to reading:

# distro      : distro vmlinuz and modules/firmware that will be used
# w_bootfrom  : vmlinuz/initrd.gz location, which might be a dir or a mounted iso (/mnt/iso)
# bootfromdir : like w_bootfrom but always the directory (e.g. even if iso loop being used; then its dir where iso is)
# mountfrom   : where layers are mounted from. e.g. w_bootfrom dir or from layers_base/RAM
# w_changes   : =""|media or RAM0|RAM1|RAM2 or no_uc0 or no_uc1, path2dir (for detailed comments refer lines 109 on)
# w_changes1  : =""|media or RAM0|RAM1|RAM2 or no_uc0 or no_uc1 (only for use when w_changes=path2dir
# w_altNN     : alternative/additional location for NNfiles for mounting to the NN overlay layers
# w_rmmodule  : Name of module from main list you don't want loaded
# w_addmodule : Name of extra module to load (modprobe)
# w_usbwait	  : wait seconds for slow devices
# w_copy2ram  : is boolean 0(true) or 1(false) to copy all NNsfs, NNdirs, w_rdshN.plug to RAM
# w_debug     : Debugging off (boolean 1 means false)
# layers_base : default is /mnt/layers/RAM for (upper_)w_changes=RAM and w_copy2ram storage in tmpfs

# mount any NNsfs files or NNdir(s) to layers_base/NN layer
# and add to overlay "lower" list
_addlayer (){
  for addlayer in *; do
	NN="${addlayer:0:2}" # gets first two characters and below checks they are numeric (-gt 00)
	if [ "$NN" -gt 0 ] 2>/dev/null; then
		if [ "${addlayer##*.}" = "sfs" ]; then
			# layer to mount is an sfs file
			lower="${NN} ${lower}"
			mkdir -p "${layers_base}/$NN"
			# umount any previous lower precedence mount
			mountpoint -q "${layers_base}/$NN" && umount "${layers_base}/$NN"
			mount "${addlayer}" "${layers_base}/$NN"
		elif [ -d "$addlayer" ]; then
			# layer to mount is an uncompressed directory
			lower="${NN} ${lower}"
			mkdir -p "${layers_base}/$NN"
			# umount any previous lower precedence mount
			mountpoint -q "${layers_base}/$NN" && umount "${layers_base}/$NN"
			mount --bind "${addlayer}" "${layers_base}/$NN"
		fi
	fi
  done
  sync
  echo -e "\e[95mCurrent directory is `pwd`\e[0m" >/dev/console
  echo -e "\e[95mlower_accumulated is ${lower:-empty list}\e[0m" >/dev/console
  #wiak: Can include code for middle and lower overlays here if customisation wanted
}
_chk_mediaformat (){  # $1 is w_changes or w_changes1, $2 is bootdev or changesdev
	fmt_ok=1  # allow non-RAM0 mode save persistence
	if [ "$1" != "RAM0" ];then
		bkids=`busybox blkid | grep "$2"`
		for fmt in $bkids; do fmt=${fmt#*=}
			if [ $fmt = '"vfat"' -o $fmt = '"ntfs"' ];then
				fmt_ok=0
				mkdir -p ${layers_base}/RAM/upper_changes ${layers_base}/RAM/work
				upper_work="upperdir=${layers_base}/RAM/upper_changes,workdir=${layers_base}/RAM/work${xino}"		
				[ $w_copy2ram -eq 0 ] && umount_bootdevice="allowed"  # since everything in RAM can umount bootdevice
				echo -e "\e[33mMedia partition format is $fmt\e[0m" >/dev/console
				echo -e "\e[33mSave changes media partition MUST have Linux format\e[0m" >/dev/console
				echo -e "\e[33mBooting in RAM0 no save persistence mode instead of selected\e[0m" >/dev/console				
				sleep 5 # to give time to read...
			fi
		done
	fi
}
## end of functions that can instead be supplied by external w_init file 

_w_rdsh w_rdsh0  # Source w_rdsh0.plug if it exists. Thereafter, if grub kernel-line w_rdsh0 specified start busybox debug shell
_w_rdsh w_inram00  # Source w_inram00 plugin, for example to set up swap space or zram

uc_ro="";middle="";bottom=""		# initialise key "optional layer(s)" variables to empty
layers_base=/mnt/layers			# making this a variable in case useful to move somewhere else
mkdir -p ${layers_base}/RAM		# for (upper_)w_changes=RAM and w_copy2ram storage in tmpfs
# Using same name for mount dir as for related overlay uc_ro variable for w_changes
# where media upper_changes is mounted readonly just below top rw changes layer
mkdir -p ${layers_base}/uc_ro  # actually it gets mounted rw but considered ro in overlayfs structure

# inram_sz=NNN[%]  # (from: man mount - tmpfs option size=): Override default maximum size of the filesystem. The size is given in bytes, and rounded up to entire pages. The default is half of the memory. The size parameter also accepts a suffix % to limit this tmpfs instance to that percentage of your physical RAM: the default, when neither size nor nr_blocks is specified, is size=50%

[ ! "$inram_sz" = "" ] && inram_sz=",size=${inram_sz}" || inram_sz=",size=100%"  # size of tmpfs inram for layers_base/RAM
mount -o mode=1777,nosuid,nodev${inram_sz} -n -t tmpfs inram ${layers_base}/RAM  # for w_changes=RAM;w_copy2ram

cd "${w_bootfrom}" # where the NN files/dirs and w_rdshN.plug files are
if	[ $w_copy2ram -eq 0 ]; then
	echo -e "\e[33mCopying all NNsfs, NNdirs and w_rdsh plugins to RAM. Please wait patiently...\e[0m" >/dev/console
	mountfrom="${layers_base}/RAM"  # which is tmpfs in RAM
	# copy all NNsfs, NNdirectories and any w_rdsh plugin files to RAM ready for mounting to layers
	for addlayer in *; do
		NN="${addlayer:0:2}" # gets first two characters and below checks they are numeric (-ge 00)
		if [ "$NN" -ge 0 ] 2>/dev/null; then cp -a "$addlayer" "${mountfrom}"; fi
	done
	cp -a w_rdsh*.plug "${mountfrom}" 2>/dev/null
	cp -a modules_remove.plug "${mountfrom}" 2>/dev/null
	cp -a w_pre_switch_root.plug "${mountfrom}" 2>/dev/null
	cp -a w_inram00.plug "${mountfrom}" 2>/dev/null  # probably not needed here but ok
	cp -a seek_timeout.plug "${mountfrom}" 2>/dev/null  # probably not needed here but ok
# wiak check	. copy2ram_extras.plug NO... see below
#	if [ -n "$(ls bottom 2>/dev/null)" ]; then mkdir -p "${mountfrom}/bottom"; cp -a bottom/* "${mountfrom}/bottom" 2>/dev/null;fi
#	if [ -n "$(ls middle 2>/dev/null)" ];then mkdir -p "${mountfrom}/middle"; cp -a middle/* "${mountfrom}/middle" 2>/dev/null;fi
	sync; sync; cd /  # so can umount bootpartion
fi

# Different filesystems use different inode numbers. xino provides translation to fix the issue
# but often doesn't work if w_changes filesystem different from rootfs (so then need unpreferred xino=off)
#xino=`egrep -o "xino=[^ ]+" /proc/cmdline | cut -d= -f2`  # can force xino value at grub kernel line
[ "$xino" = "" ] || xino=",xino=$xino"

_w_rdsh w_rdsh1  # Source w_rdsh1.plug if it exists. Thereafter, if grub kernel-line w_rdsh0 specified start busybox debug shell

# There are several alternative "w_changes=" modes: empty arg|media; RAM0,RAM1,RAM2; no_uc0(readonly); no_uc1; "path2dir"
# 1. No w_changes argument on grub kernel line or w_changes=media: Use upper_changes in /mnt/bootpartition/bootdir
# 2. RAMx: All changes go to RAM only (layers_base/RAM/upper_changes). Use external rsync scripts like wd_save_arch64 for persistence. Details via comments in code below.
# 3. no_uc0 and no_uc1: overlay filesystem is rendered read only so it cannot be written to at all. Maybe useful for remastering.
# 4. path2dir: store upper_changes in specified alternative path/directory

case "$w_changes" in
	""|"media") # for default uc saved to media (such as usb stick or hard disk)
	  _chk_mediaformat "$w_changes" "$bootdev"  # use RAM0 no save persistence if not Linux format
	  if [ "$fmt_ok" = 1 ];then
		# xino seems to default to off but if desired can later try to force xino=on using grub kernel line
		mkdir -p "${bootfromdir}"/upper_changes "${bootfromdir}"/work  # for rw persistence
		upper_work="upperdir=""${bootfromdir}""/upper_changes,workdir=""${bootfromdir}""/work${xino}"
	  fi
	;;		
	"RAM0"|"RAM1"|"RAM2") # for alternative upper_changes in RAM modes
	  _chk_mediaformat "$w_changes" "$bootdev"
	  if [ "$fmt_ok" = 1 ];then
		[ $w_copy2ram -eq 0 ] && umount_bootdevice="allowed"  # since everything in RAM can umount bootdevice
		mkdir -p ${layers_base}/RAM/upper_changes ${layers_base}/RAM/work
		upper_work="upperdir=${layers_base}/RAM/upper_changes,workdir=${layers_base}/RAM/work${xino}"
		case "$w_changes" in
			# Nothing extra needs done here for RAM0 case, 
			# being for uc in RAM but external media uc contents not included at all
			"RAM1") # for uc in RAM but external media uc contents copied in (prev: EXIT)
				# Put previous stored upper_changes into RAM/upper_changes for optional later saving using /usr/local/bin/wd_save_<distro> rsync script
				echo -e "\e[33mCopying stored upper_changes to RAM. Please wait patiently...\e[0m" >/dev/console
				cp -a ${bootfromdir}/upper_changes/* ${layers_base}/RAM/upper_changes/
			;;
			"RAM2") # for uc in RAM but external media uc loop mounted to highest RO layer
				# layer to mount as an uncompressed directory
				# done around line 79: mkdir -p "${layers_base}/uc_ro"
				mkdir -p "${bootfromdir}/upper_changes/" && mount --bind "${bootfromdir}/upper_changes/" "${layers_base}/uc_ro/"
				uc_ro="uc_ro:"
			;;
		esac
	  fi
	;;
	"no_uc0"|"readonly") # no_uc0 at all - was previously known as readonly mode
		[ $w_copy2ram -eq 0 ] && umount_bootdevice="allowed"  # since everything in RAM can un-mount bootdevice
		upper_work=""
	;;
	"no_uc1")
	  _chk_mediaformat "$w_changes" "$bootdev"
	  if [ "$fmt_ok" = 1 ];then
		# for external media uc loop mounted to highest RO layer but no writable uc
		# layer to mount is an uncompressed directory
		# done around line 79: mkdir -p "${layers_base}/uc_ro"
		mount --bind "${bootfromdir}/upper_changes/" "${layers_base}/uc_ro/"
		uc_ro="uc_ro:"		
		upper_work=""
	  fi
	;;
	*)	# i.e. "altmedia" for upper_changes on other than bootfrom partition
		if `echo "$w_changes" | grep -q 'UUID'`; then
			_find_fs_changes  # e.g. /mnt/sdc3
			from_path="${w_changes##*=}"
			w_changes="${changesmnt}""${from_path}"
		elif `echo "$w_changes" | grep -q 'LABEL'`; then
			_find_fs_changes
			from_path="${w_changes##*=}"
			w_changes="${changesmnt}""${from_path}"
		else
			# changesmnt=`echo "$w_changes" | awk -F "/" '{print "/"$2"/"$3}'`  # but not required
			changesdev=`echo "$w_changes" | awk -F "/" '{print "/dev/"$3}'`
		fi
		# Mount partition to be used for upper_changes
		changes_partition=`echo "$w_changes" | cut -d/ -f3` # extract partition name
		mkdir -p /mnt/${changes_partition} && mount /dev/${changes_partition} /mnt/${changes_partition}

		case "$w_changes1" in
			""|"media")
			  _chk_mediaformat "$w_changes1" "$changesdev"
			  if [ "$fmt_ok" = 1 ];then
				# for uc saved to media (such as usb stick or hard drive),
				# which results in default w_changes1=""
				# xino seems to default to off but if desired can later try to force xino=on using grub kernel line
				mkdir -p "${w_changes}"/upper_changes "${w_changes}"/work
				[ "$xino" = "" ] && xino=",xino=off"  # But can later try to force xino=on, if desired, using grub
				upper_work="upperdir=""${w_changes}""/upper_changes,workdir=""${w_changes}""/work${xino}"
				[ $w_copy2ram -eq 0 ] && umount_bootdevice="allowed"  # as long as changes_partition different to bootpartition can umount bootdevice
			  fi
			;;		
			"RAM0"|"RAM1"|"RAM2") # for alternative upper_changes in RAM modes
			  _chk_mediaformat "$w_changes1" "$changesdev"
			  if [ "$fmt_ok" = 1 ];then
				[ $w_copy2ram -eq 0 ] && umount_bootdevice="allowed"  # since everything in RAM can un-mount bootdevice ######wiak remove: to be corrected
				mkdir -p ${layers_base}/RAM/upper_changes ${layers_base}/RAM/work
				upper_work="upperdir=${layers_base}/RAM/upper_changes,workdir=${layers_base}/RAM/work${xino}"
				case "$w_changes1" in
					# Nothing extra needs done here for RAM0 case, 
					# being for uc in RAM but external media uc contents not included at all
					"RAM1") # for uc in RAM but external media uc contents copied in (prev: EXIT)
							# Put previous stored upper_changes into RAM/upper_changes for optional later saving using /usr/local/bin/wd_save_<distro> rsync script
							echo -e "\e[33mCopying stored upper_changes to RAM. Please wait patiently...\e[0m" >/dev/console
							cp -a ${w_changes}/upper_changes/* ${layers_base}/RAM/upper_changes/
					;;
					"RAM2") # for uc in RAM but external media uc loop mounted to highest RO layer
							# layer to mount as an uncompressed directory
							# done around line 79: mkdir -p "${layers_base}/uc_ro"
							mkdir -p "${w_changes}/upper_changes/" && mount --bind "${w_changes}/upper_changes/" "${layers_base}/uc_ro/"
							uc_ro="uc_ro:"
					;;
				esac
			  fi
			;;
			"no_uc0"|"readonly") # no_uc0 at all - was previously known as readonly mode
				[ $w_copy2ram -eq 0 ] && umount_bootdevice="allowed"  # since everything in RAM can umount bootdevice
				upper_work=""
			;;
			"no_uc1")	# for external media uc loop mounted to highest RO layer but no writable uc
						# layer to mount is an uncompressed directory
						# done around line 79: mkdir -p "${layers_base}/uc_ro"
			  _chk_mediaformat "$w_changes1" "$changesdev"
			  if [ "$fmt_ok" = 1 ];then
				mount --bind "${w_changes}/upper_changes/" "${layers_base}/uc_ro/"
				uc_ro="uc_ro:"		
				upper_work=""
			  fi
			;;
		esac
	;;
esac

# Make sfs mount and layers directories and bind and mount them appropriately as follows:

mkdir -p ${layers_base}/merged  # For the combined overlay result

# make lower overlay a series of mounts of either sfs files or 
# uncompressed directories named in the form NNfilename.sfs or NNdirectoryname
# NN numeric value determines order of overlay loading. 01 is lowest layer.
# 00firstrib_firmware_modules.sfs is handled separately
lower=""  # Initialise overlay 'lower' list

# Mount any NNsfs files in initrd to appropriate NN overlays
# If there are any they must be stored in initrd dir /boot/initrdNN
mkdir -p /boot/initrdNN
cd /boot/initrdNN
# mount any NNsfs files or NNdir(s) held in /boot/initrdNN
_addlayer	# and add (lowest priority) to overlay "lower" layers list

# mount any NNsfs files or NNdir(s) held in "${mountfrom}" to
# appropriate NN overlays (could be in w_bootfrom or layers_base/RAM)
cd "${mountfrom}"  # i.e. w_bootfrom dir or layers_base/RAM
_addlayer  # add/replace mounts (middle priority) and add to overlay "lower" layers list

# If w_altNN=path2dir specified on commandline
if [ ! -z $w_altNN ]; then
	if `echo "$w_altNN" | grep -q 'UUID'`; then
		_find_fs_altNN  # e.g. /mnt/sda1
		from_path="${w_altNN##*=}"
		w_altNN="${altNNmnt}""${from_path}"
	elif `echo "$w_altNN" | grep -q 'LABEL'`; then
		_find_fs_altNN
		from_path="${w_altNN##*=}"
		w_altNN="${altNNmnt}""${from_path}"
	else
		:  # altNNmnt=`echo "$w_altNN" | awk -F "/" '{print "/"$2"/"$3}'`  # but not required
	fi
	# Mount partition containing w_altNN location
	w_altNN_partition=`echo "$w_altNN" | cut -d/ -f3` # extract partition name
	mkdir -p /mnt/${w_altNN_partition} && mount /dev/${w_altNN_partition} /mnt/${w_altNN_partition}
	cd "$w_altNN"
	# mount any NNsfs files or NNdir(s) held in "$w_altNN"
	_addlayer  # add/replace mounts (highest priority) and add to overlay "lower" layers list
fi

_w_rdsh w_rdsh2  # Source w_rdsh2.plug if it exists. Thereafter, if grub kernel-line w_rdsh2 specified start busybox debug shell

# Sort resulting overlay 'lower' layers list
# add new NN item to overlay \$lower list, reverse sort the list, and mount NNfirstrib_rootfs	
lower="`for i in $lower; do echo $i; done | sort -ru`"  # sort the list and remove duplicates

# If using firmware_modules 00 raw directory or sfs file do the following
# Otherwise, you need to make sure any required </usr>/lib/firmware and modules
# are in firstrib_rootfs build via, e.g. for void: xbps-install linuxX.XX, ncurses-base, linux-firmware-network etc
fw_modules=""
cd "${mountfrom}"  # i.e. w_bootfrom dir or layers_base/RAM
for fm in *;do
NN=${fm:0:2}
if [ "$NN" = "00" ];then
	if [ "${fm##*.}" = "sfs" ];then
		fw_modules=":00firmware_modules"
		mkdir -p ${layers_base}/00firmware_modules /usr/lib/modules
		mount "${mountfrom}"/${fm} ${layers_base}/00firmware_modules		
		sleep 1  # may not be required
		if [ "$fwmod" = "usrlib" ];then
			mount --bind ${layers_base}/00firmware_modules/usr/lib/modules /usr/lib/modules  # needed for overlayfs module
		else
			mount --bind ${layers_base}/00firmware_modules/lib/modules /usr/lib/modules  # default (as in debian and most pups)
		fi
	elif [ -d "$fm" ]; then
		fw_modules=":00firmware_modules"
		mkdir -p ${layers_base}/00firmware_modules /usr/lib/modules
		mount --bind "${mountfrom}"/${fm} ${layers_base}/00firmware_modules		
		sleep 1  # may not be required
		if [ "$fwmod" = "usrlib" ];then
			mount --bind ${layers_base}/00firmware_modules/usr/lib/modules /usr/lib/modules  # needed for overlayfs module
		else
			mount --bind ${layers_base}/00firmware_modules/lib/modules /usr/lib/modules  # default (as in debian and most pups)
		fi
	fi
fi
done

# Load module to allow overlay filesystem functionality
modprobe overlay # && umount /usr/lib/modules 2>/dev/null  # modules to be reloaded during overlay merge 
sync

# compress whitespace and remove leading/trailing and put required colons into ${lower} layers list
lower="`echo $lower | awk '{$1=$1;print}'`"; lower=${lower// /:} # ${var//spacePattern/colonReplacement}

echo -e "\e[95mw_bootfrom is ${w_bootfrom:-ERROR}\e[0m" >/dev/console
echo -e "\e[95mbootfromdir is ${bootfromdir:-ERROR}\e[0m" >/dev/console
echo -e "\e[95mmountfrom is ${mountfrom:-ERROR}\e[0m" >/dev/console
echo -e "\e[95mw_altNN is ${w_altNN:-not defined on grub kernel line}\e[0m" >/dev/console
echo -e "\e[95mlower (sorted/unique) is ${lower:-ERROR}\e[0m" >/dev/console
echo -e "\e[95mupper_work is ${upper_work:-readonly}\e[0m" >/dev/console

_w_rdsh w_rdsh3  # Source w_rdsh3.plug if it exists. Thereafter, if grub kernel-line w_rdsh3 specified start busybox debug shell

cd ${layers_base}  # Since this is where the overlay mountpoints are
# Combine the overlays with result in ${layers_base}/merged
### Or use optional AUFS here (but use opposite numeric 'order' in $lower etc) ###
mount -t overlay -o lowerdir=${uc_ro}${middle}${lower}${fw_modules}${bottom},"${upper_work}" overlay_result merged

_w_rdsh w_rdsh4  # Source w_rdsh4.plug if it exists. Thereafter, if grub kernel-line w_rdsh4 specified start busybox debug shell

# Prior to switch_root need to --move main mounts to new rootfs merged:
mkdir -p merged/mnt/${bootpartition} merged${layers_base}  merged/usr/lib/modules # merged${layers_base}/RAM merged${layers_base}/uc_ro
mountpoint -q /mnt/${bootpartition} && mount --move /mnt/${bootpartition} merged/mnt/${bootpartition}
if [ ! -z "$changes_partition" ];then mkdir -p merged/mnt/${changes_partition} && mount --move /mnt/${changes_partition} merged/mnt/${changes_partition};fi
mountpoint -q /usr/lib/modules && mount --move /usr/lib/modules merged/usr/lib/modules
# Make whole of layers_base available in overlay merged
mount --rbind ${layers_base} merged${layers_base}

if [ -f merged"${mountfrom}"/modules_remove.plug ]; then  # source modules_remove plugin
	. merged"${mountfrom}"/modules_remove.plug
else
	# Remove unused modules to save memory
	modprobe -r `lsmod | cut -d' ' -f1 | grep -Ev 'ehci|xhci|sdhci|uas|usbhid'` 2>/dev/null  # keep ehci,xhci,sdhci,uas,usbhid
fi

# If grub kernel-line w_rdsh5 specified then start busybox debug shell
_w_rdsh w_rdsh5

[ "$umount_bootdevice" = "allowed" ] && echo -e "\e[96mYou can now umount bootdevice if you wish\e[0m" >/dev/console

# if w_pre_switch_root.plug exists in w_bootfrom directory source it
[ -s merged"${mountfrom}"/w_pre_switch_root.plug ] && . merged"${mountfrom}"/w_pre_switch_root.plug

# Unmount virtual filesystems prior to making switch_root to main merged root filesystem
umount /dev && umount /sys && umount /proc && sync
exec switch_root merged /sbin/init
